/* ----------------------------------------------------------------------- *//**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 *
 * @file graph.sql_in
 *
 * @brief SQL functions for graph analytics
 * @date Nov 2016
 *
 * @sa Provides various graph algorithms.
 *
 *//* ----------------------------------------------------------------------- */
m4_include(`SQLCommon.m4')


/**
@addtogroup grp_sssp

<div class="toc"><b>Contents</b>
<ul>
<li><a href="#sssp">SSSP</a></li>
<li><a href="#notes">Notes</a></li>
<li><a href="#examples">Examples</a></li>
<li><a href="#literature">Literature</a></li>
</ul>
</div>

@brief Finds the shortests path from a single source vertex to every other vertex in a given graph.

Given a graph and a source vertex, single source shortest path (SSSP) algorithm finds a path for every vertex such that the the sum of the weights of its constituent edges is minimized.

@anchor sssp
@par SSSP
<pre class="syntax">
graph_sssp(
    vertex_table            TEXT,
    vertex_id               TEXT,
    edge_table              TEXT,
    edge_args               TEXT,
    source_vertex           INT,
    out_table               TEXT
)
</pre>

\b Arguments
<dl class="arglist">
<dt>vertex_table</dt>
<dd>TEXT. Name of the table that contains the vertex data. Has to contain the column specified in the vertex_id parameter.</dd>

<dt>vertex_id</dt>
<dd>TEXT, default = 'id'. Name of the column containing the vertex ids in the vertex table.</dd>

<dt>edge_table</dt>
<dd>TEXT. Name of the table that contains the edge data. Has to contain the columns specified in the edge_args parameter.</dd>

<dt>edge_args</dt>
<dd>TEXT. A comma-delimited string containing multiple named arguments of the form "name=value". The following parameters are supported for this string argument:
	- src (default = 'src'): Name of the column containing the source vertex ids in the edge table.
	- dest (default = 'dest'): Name of the column containing the destination vertex ids in the edge table.
	- weight (default = 'weight'): Name of the column containing the weight of edges in the edge table.</dd>

<dt>source_vertex</dt>
<dd>TEXT. The source vertex id for the algorithm to start. This vertex id has to exist in the vertex_id column of vertex_table.</dd>

<dt>out_table</dt>
<dd>TEXT. Name of the table to store the result of SSSP. It will contain a row for every vertex from vertex_table and have the following columns:
	- vertex_id : The id for the destination. Will use the input parameter (vertex_id) for column naming.
	- weight : The total weight of the shortest path from the source vertex to this particular vertex. Will use the input parameter (weight) for column naming.
	- parent : The parent of this vertex in the shortest path from source. Will use "parent" for column naming.</dd>
</dl>

@par Path Retrieval

<pre class="syntax">
graph_sssp(
    sssp_table            TEXT,
    dest_vertex           INT
)
</pre>

\b Arguments
<dl class="arglist">
<dt>sssp_table</dt>
<dd>TEXT. Name of the table that contains the SSSP output.</dd>

<dt>dest_vertex</dt>
<dd>INT. The vertex that will be the destination of the desired path.</dd>
</dl>

@anchor notes
@par Notes

The Bellman-Ford algorithm [1] is used for implementing SSSP. This implementation allows negative edges as long as there are no negative cycles. In the case of graphs with negative cycles, the function will give an error but still	 provide the output table in case the user wants to analyze it further.

The implementation is inspired by the GRAIL project [2].

@anchor examples
@examp

- Create a vertex and an edge table to represent the graph.
<pre class="syntax">
DROP TABLE IF EXISTS vertex,edge,out;
CREATE TABLE vertex(
	id INTEGER
);
CREATE TABLE edge(
	src INTEGER,
	dest INTEGER,
	weight INTEGER
);
INSERT INTO vertex VALUES
(0),
(1),
(2),
(3),
(4),
(5),
(6),
(7)
;
INSERT INTO edge VALUES
(0, 1, 1),
(0, 2, 1),
(0, 4, 10),
(1, 2, 2),
(1, 3, 10),
(2, 3, 1),
(2, 5, 1),
(2, 6, 3),
(3, 0, 1),
(4, 0, -2),
(5, 6, 1),
(6, 7, 1)
;
</pre>

- Calculate the shortest paths from vertex 0
<pre class="syntax">
SELECT graph_sssp('vertex',NULL,'edge',NULL,0,'out');
SELECT * FROM out;
</pre>
<pre class="result">
 id | weight | parent
----+--------+--------
  0 |      0 |      0
  1 |      1 |      0
  2 |      1 |      0
  4 |     10 |      0
  3 |      2 |      2
  5 |      2 |      2
  6 |      3 |      5
  7 |      4 |      6
</pre>

- Get the shortest path to vertex 6
<pre class="syntax">
SELECT graph_sssp_get_path('out',6) AS spath;
</pre>
<pre class="result">
   spath
\-----------
 {0,2,5,6}
</pre>

- Use different column names in the tables
<pre class="syntax">
DROP TABLE IF EXISTS vertex_alt,edge_alt,out_alt;
CREATE TABLE vertex_alt AS SELECT id AS v_id FROM vertex;
CREATE TABLE edge_alt AS SELECT src AS e_src, dest, weight AS e_weight FROM edge;
</pre>

- Get the shortest path from vertex 1
<pre class="syntax">
SELECT graph_sssp('vertex_alt','v_id','edge_alt','src=e_src, weight=e_weight',1,'out_alt');
SELECT * FROM out_alt;
</pre>
<pre class="result">
 v_id | e_weight | parent
------+----------+--------
    1 |        0 |      1
    2 |        2 |      1
    3 |        3 |      2
    5 |        3 |      2
    0 |        4 |      3
    6 |        4 |      5
    4 |       14 |      0
    7 |        5 |      6
</pre>

@anchor literature
@par Literature

[1] Bellmanâ€“Ford algorithm. https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm.

[2] The case against specialized graph analytics engines, J. Fan, G. Soosai Raj, and J. M. Patel. CIDR 2015. http://pages.cs.wisc.edu/~jignesh/publ/Grail.pdf
*/

-------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.graph_sssp(
    vertex_table            TEXT,
    vertex_id               TEXT,
    edge_table              TEXT,
    edge_args               TEXT,
    source_vertex           INT,
    out_table               TEXT

) RETURNS VOID AS $$
    PythonFunction(graph, sssp, graph_sssp)
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `MODIFIES SQL DATA', `');
-------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.graph_sssp_get_path(
    sssp_table             TEXT,
    dest_vertex            INT

) RETURNS INT[] AS $$
    PythonFunction(graph, sssp, graph_sssp_get_path)
$$ LANGUAGE plpythonu VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');
-------------------------------------------------------------------------

-- Online help
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.graph_sssp(
    message VARCHAR
) RETURNS VARCHAR AS $$
    PythonFunction(graph, sssp, graph_sssp_help)
$$ LANGUAGE plpythonu IMMUTABLE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');

--------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.graph_sssp()
RETURNS VARCHAR AS $$
    SELECT MADLIB_SCHEMA.graph_sssp('');
$$ LANGUAGE sql IMMUTABLE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');
--------------------------------------------------------------------------------


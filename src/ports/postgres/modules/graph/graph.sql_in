
m4_include(`SQLCommon.m4')


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.graph_sssp(
	vertex_table	TEXT,
    edge_table		TEXT,
    out_table		TEXT,
    source_vid		INTEGER
) RETURNS VOID AS $$
DECLARE

flag integer := -1;

isFirst integer := 1;

BEGIN

SET client_min_messages TO WARNING;

DROP TABLE IF EXISTS message;
DROP TABLE IF EXISTS toupdate;

EXECUTE 'DROP TABLE IF EXISTS '||out_table;

EXECUTE 'CREATE TABLE '||out_table||' AS
SELECT id::int AS id, CAST(2147483647 AS INT) AS  val, ARRAY[]::int[] AS spath
FROM '||vertex_table
;

CREATE TABLE message(
 id int,
 val INT,
 spath int[]
);


CREATE TABLE toupdate(
 id int,
 val INT,
 spath int[]
);

EXECUTE 'INSERT INTO message VALUES('||source_vid||', CAST(0 as INT))';

WHILE flag != 0 LOOP

	IF (isFirst = 1)
	THEN
		isFirst := 0;
	ELSE
		TRUNCATE TABLE message;

		EXECUTE 'INSERT INTO message
			SELECT '||edge_table||'.dest AS id, x.val AS val,
				toupdate.spath AS spath
			FROM toupdate, '||edge_table||', (
				SELECT '||edge_table||'.dest AS id,
					min(toupdate.val + '||edge_table||'.weight) AS val
				FROM toupdate, '||edge_table||'
				WHERE '||edge_table||'.src=toupdate.id
				GROUP BY '||edge_table||'.dest) x
			WHERE '||edge_table||'.src = toupdate.id
				AND '||edge_table||'.dest = x.id
				AND toupdate.val + '||edge_table||'.weight = x.val'
		;

	END IF;

	TRUNCATE TABLE toupdate;

	EXECUTE 'INSERT INTO toupdate
		SELECT DISTINCT ON (message.id) message.id AS id, message.val AS val, array_append(message.spath, '||out_table||'.id) AS spath
		FROM message, '||out_table||'
		WHERE message.id = '||out_table||'.id  AND message.val<'||out_table||'.val'
	;

	EXECUTE 'UPDATE '||out_table||' SET
		val=toupdate.val,
		spath=toupdate.spath
		FROM
		toupdate
		WHERE
		'||out_table||'.id=toupdate.id'
	;

	flag := (SELECT COUNT (*) FROM toupdate);

END LOOP;

END;

$$ LANGUAGE plpgsql VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');


m4_include(`SQLCommon.m4')


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.graph_sssp(
	vertex_table	TEXT,
    edge_table		TEXT,
    out_table		TEXT,
    source_vid		INTEGER
) RETURNS VOID AS $$
DECLARE

flag integer := -1;

isFirst integer := 1;

BEGIN

SET client_min_messages TO WARNING;

DROP TABLE IF EXISTS cur_alias;

DROP TABLE IF EXISTS cur;

DROP TABLE IF EXISTS message;

DROP TABLE IF EXISTS next;

DROP TABLE IF EXISTS out_cnts;

DROP TABLE IF EXISTS in_cnts;

DROP TABLE IF EXISTS toupdate;

DROP INDEX IF EXISTS idx_src;

DROP INDEX IF EXISTS idx_dest;

DROP TABLE IF EXISTS next;

CREATE TABLE next AS
SELECT id AS id, CAST(2147483647 AS INT) AS  val
FROM vertex
;

CREATE TABLE message(
 id int,
 val INT
);

CREATE TABLE cur(
 id int,
 val INT
);

CREATE TABLE toupdate(
 id int,
 val INT
);

INSERT INTO message VALUES(0, CAST(0 as INT));

WHILE flag != 0 LOOP

	IF (isFirst = 1)
	THEN
		TRUNCATE TABLE cur;
		INSERT INTO cur
			SELECT message.id AS id, MIN(message.val) AS val
			FROM message
			GROUP BY message.id
		;
		isFirst := 0;
	ELSE
		TRUNCATE TABLE message;
		INSERT INTO message
			SELECT edge.dest AS id, MIN(toupdate.val + edge.weight) AS val
			FROM toupdate, edge
			WHERE edge.src = toupdate.id
			GROUP BY edge.dest
		;
	END IF;

	TRUNCATE TABLE cur;
	INSERT INTO cur
		SELECT message.id AS id, MIN(message.val) AS val
		FROM message
		GROUP BY message.id
	;

	TRUNCATE TABLE message;

	TRUNCATE TABLE toupdate;

	INSERT INTO toupdate
		SELECT cur.id AS id, cur.val AS val
		FROM cur, next
		WHERE cur.id = next.id  AND cur.val<next.val
	;

	UPDATE next SET
		val=toupdate.val
		FROM
		toupdate
		WHERE
		next.id=toupdate.id
	;
	TRUNCATE TABLE message;

	INSERT INTO message
		SELECT edge.dest AS id, MIN(toupdate.val + edge.weight) AS val
		FROM toupdate, edge
		WHERE edge.src = toupdate.id
		GROUP BY edge.dest
	;

	TRUNCATE TABLE cur;

	flag := (SELECT COUNT (*) FROM toupdate);

END LOOP;

END;

$$ LANGUAGE plpgsql VOLATILE
m4_ifdef(`\_\_HAS_FUNCTION_PROPERTIES\_\_', `CONTAINS SQL', `');
